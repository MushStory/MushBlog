{"version":3,"sources":["screen/splash/Splash.js","screen/main/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Splash","props","state","date","moment","format","splashTextOpacity","setTimeout","setState","splashAnimationEnd","this","mainScreenOn","splashAnimationStart","className","style","opacity","Component","Main","App","prevState","transition","transitionDuration","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAqDeA,G,8DA/CX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,KAAMC,MAASC,OAAO,cACtBC,kBAAmB,KAJT,E,mEAQK,IAAD,OAClBC,YAAW,WACP,EAAKC,SAAS,CACVF,kBAAmB,MAEvBC,YAAW,WACP,EAAKC,SAAS,CACVF,kBAAmB,MAEvBC,YAAW,WACP,EAAKE,uBACN,OACJ,OACJ,O,2CAIHC,KAAKT,MAAMU,iB,0CAIXD,KAAKE,yB,6EAOA,IAAD,EAC8BF,KAAKR,MAAhCC,EADH,EACGA,KAAMG,EADT,EACSA,kBAEb,OACI,qBAAKO,UAAU,SAAf,SACI,qBAAKA,UAAW,aAAcC,MAAO,CAACC,QAAST,GAA/C,SAAoEH,U,GA1C/Da,cCsBNC,G,wDAvBX,WAAYhB,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,GAFC,E,gJAcd,OACI,sBAAKW,UAAU,OAAf,UACI,qBAAKA,UAAU,kBACf,qBAAKA,UAAU,YAAf,6B,GAlBGG,cC8BJE,E,kDA3Bb,WAAYjB,GAAO,IAAD,8BAChB,cAAMA,IAMRU,aAAe,WACb,EAAKH,UAAS,SAAAW,GAAS,MAAK,CAC1BJ,QAAS,SAPX,EAAKb,MAAQ,CACTa,QAAS,KAHG,E,qDAaT,IACAA,EAAWL,KAAKR,MAAhBa,QAEP,OACE,sBAAKF,UAAU,MAAf,UACE,cAAC,EAAD,CAAQF,aAAcD,KAAKC,eAC3B,qBAAKG,MAAO,CAACC,QAASA,EAASK,WAAY,KAAMC,mBAAoB,MAArE,SACE,cAAC,EAAD,a,GArBQL,aCOHM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.894e7a2a.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport moment from 'moment';\r\nimport 'moment/locale/ko';\r\nimport './Splash.css';\r\n\r\nclass Splash extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            date: moment().format('YYYY-MM-DD'),\r\n            splashTextOpacity: '0',\r\n        }\r\n    }\r\n\r\n    splashAnimationStart(){\r\n        setTimeout(() => {\r\n            this.setState({\r\n                splashTextOpacity: '1'\r\n            });\r\n            setTimeout(() => {\r\n                this.setState({\r\n                    splashTextOpacity: '0'\r\n                });\r\n                setTimeout(() => {\r\n                    this.splashAnimationEnd();\r\n                }, 1000);\r\n            }, 1000);\r\n        }, 1000);\r\n    }\r\n\r\n    splashAnimationEnd(){\r\n        this.props.mainScreenOn();\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.splashAnimationStart();\r\n    }\r\n\r\n    componentDidUpdate(){\r\n\r\n    }\r\n\r\n    render(){\r\n        const {date, splashTextOpacity} = this.state;\r\n\r\n        return(\r\n            <div className=\"Splash\">\r\n                <div className={'SplashText'} style={{opacity: splashTextOpacity}}>{date}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Splash;","import { Component } from 'react';\r\nimport './Main.css';\r\n\r\nclass Main extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n    }\r\n\r\n    componentDidUpdate(){\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Main\">\r\n                <div className=\"CalanderImage\"></div>\r\n                <div className=\"MonthText\">FEBRUARY</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;","import { Component } from 'react';\r\nimport './App.css';\r\nimport Splash from './screen/splash/Splash';\r\nimport Main from './screen/main/Main';\r\n\r\nclass App extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n        opacity: '0',\r\n    }\r\n  }\r\n\r\n  mainScreenOn = () => {\r\n    this.setState(prevState => ({\r\n      opacity: '1',\r\n    }));\r\n  }\r\n\r\n  render(){\r\n    const {opacity} = this.state;\r\n\r\n    return(\r\n      <div className=\"App\">\r\n        <Splash mainScreenOn={this.mainScreenOn}></Splash>\r\n        <div style={{opacity: opacity, transition: '1s', transitionDuration: '1s'}}>\r\n          <Main></Main>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}